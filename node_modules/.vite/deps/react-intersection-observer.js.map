{
  "version": 3,
  "sources": ["../../src/observe.ts", "../../src/InView.tsx", "../../src/useInView.tsx"],
  "sourcesContent": ["import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n", "import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n", "import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n\n  React.useEffect(() => {\n    if (!ref && entryTarget && !triggerOnce && !skip) {\n      // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView,\n        entry: undefined,\n      });\n    }\n  }, [ref, entryTarget, triggerOnce, skip, initialInView]);\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],
  "mappings": "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",
  "names": ["observerMap", "Map", "RootIds", "WeakMap", "rootId", "unsupportedValue", "undefined", "defaultFallbackInView", "inView", "getRootId", "root", "has", "get", "set", "toString", "optionsToId", "options", "Object", "keys", "sort", "filter", "key", "map", "createObserver", "id", "instance", "elements", "thresholds", "observer", "IntersectionObserver", "entries", "forEach", "entry", "isIntersecting", "some", "threshold", "intersectionRatio", "trackVisibility", "isVisible", "target", "callback", "Array", "isArray", "observe", "element", "fallbackInView", "window", "bounds", "getBoundingClientRect", "time", "boundingClientRect", "intersectionRect", "rootBounds", "callbacks", "push", "unobserve", "splice", "indexOf", "length", "size", "disconnect", "isPlainChildren", "props", "children", "InView", "node", "_unobserveCb", "handleNode", "triggerOnce", "skip", "setState", "initialInView", "observeNode", "handleChange", "onChange", "state", "componentDidUpdate", "prevProps", "rootMargin", "delay", "componentWillUnmount", "render", "ref", "as", "createElement", "Component", "useInView", "useState", "setRef", "useRef", "React", "current", "useEffect", "entryTarget", "result"]
}
